/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/board.js":
/*!**********************!*\
  !*** ./src/board.js ***!
  \**********************/
/***/ ((module) => {

eval("module.exports = class Board{\r\n\r\n    #xGap;\r\n    #yGap;\r\n    #clickedLines = [];\r\n    #completedSquarePoints = [];\r\n    #turns = 1;\r\n\r\n    static LineType = Object.freeze({\r\n        horizontal: 'horizontal',\r\n        vertical: 'vertical'\r\n    });\r\n\r\n    constructor(options){\r\n        this.width = options.width;\r\n        this.height = options.height;\r\n        this.row = options.row;\r\n        this.col = options.col;\r\n        this.ctx = options.ctx;\r\n        this.canvas = options.canvas;\r\n        this.threshold = 0.1;\r\n\r\n        this.players = options.players.length;\r\n        this.playerConfig = options.players;\r\n\r\n        this.#xGap = this.width / this.row;\r\n        this.#yGap = this.height / this.col;\r\n\r\n        this.events = options.events;\r\n\r\n        this.#init();        \r\n    }\r\n\r\n    draw(event = null){\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n        \r\n        this.#drawHover(event);\r\n        this.#drawClickline();\r\n        this.#drawCompleteSquareDots();\r\n        this.#drawDots();\r\n    }\r\n\r\n    #init(){\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n        this.events.init();\r\n\r\n        if(this.row < 2 || this.col < 2) throw new Error('A board must have at least 2x2');\r\n    }\r\n\r\n    #drawDots(){\r\n        for(let i = 0; i < this.row; i ++){\r\n            for(let j = 0; j < this.col; j++){\r\n                this.ctx.beginPath();\r\n                this.ctx.arc((i * this.#xGap) + (this.#xGap / 2), (j * this.#yGap) + (this.#yGap / 2), (Math.min(this.width, this.height) / 95) , 0, 2 * Math.PI);\r\n                this.ctx.fillStyle = '#000000';\r\n                this.ctx.fill();\r\n                this.ctx.closePath();\r\n            }\r\n        }\r\n    }\r\n\r\n    #findJointPointsFromPexelPosition(event){\r\n        let xGap = this.#xGap;\r\n        let yGap = this.#yGap;\r\n\r\n\r\n        if(event){\r\n            let react = this.canvas.getBoundingClientRect();            \r\n            let hoverX = (event.clientX - react.left + xGap / 2) / xGap;\r\n            let hoverY = (event.clientY - react.top + yGap / 2) / yGap;\r\n\r\n            const floorX = Math.floor(hoverX);\r\n            const floorY = Math.floor(hoverY);\r\n\r\n            // console.log(\"x\", hoverX, 'y', hoverY, event.type, \"x floor\", floorX, \"y floor\", floorY);\r\n\r\n\r\n            if(hoverY > 1 && \r\n                (hoverX - floorX > (1 - this.threshold) || hoverX - floorX < this.threshold) && hoverY < this.col){\r\n\r\n                // for vertical line \"|\"\r\n                // in vertical \"X\" position are same\r\n                //\r\n                //   (x1, y1)\r\n                //      o\r\n                //      |\r\n                //      |\r\n                //      |\r\n                //      |\r\n                //      |\r\n                //      |\r\n                //      o\r\n                //   (x2, y2)\r\n                // \r\n\r\n                let x = floorX + 0.5;\r\n\r\n                let y1 = (floorY - 1) + 0.5;\r\n                let y2 = floorY + 0.5;\r\n\r\n                if(hoverX - floorX < this.threshold) x = x - 1;\r\n\r\n                return {\r\n                    x1: x, \r\n                    y1: y1,\r\n                    x2: x, \r\n                    y2: y2 \r\n                }\r\n            }else if(hoverX > 1 && \r\n                (hoverY - floorY > (1 - this.threshold) || hoverY - floorY < this.threshold) && hoverX < this.row){\r\n\r\n\r\n                // for horizontal line \"--\"\r\n                // in horizonal \"Y\" position are same\r\n                //\r\n                //   (x1, y1)                 (x2, y2)\r\n                //      o=======================o\r\n                //\r\n\r\n                let x1 = (floorX - 1) + 0.5;\r\n                let x2 = floorX + 0.5;\r\n                \r\n                let y = floorY + 0.5;\r\n\r\n                if(hoverY - floorY < this.threshold) y = y - 1;\r\n\r\n                return {\r\n                    x1: x1, \r\n                    y1: y,  \r\n                    x2: x2, \r\n                    y2: y \r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    #drawHover(event){\r\n        const line = this.#findJointPointsFromPexelPosition(event);\r\n        if(line){\r\n            this.canvas.style.cursor = 'pointer';\r\n            this.ctx.lineWidth = 1;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(line.x1 * this.#xGap, line.y1 * this.#yGap); \r\n            this.ctx.lineTo(line.x2 * this.#xGap, line.y2 * this.#yGap);\r\n            this.ctx.stroke();\r\n            this.ctx.closePath();\r\n        }else{\r\n            this.canvas.style.cursor = 'default';\r\n        }\r\n    }\r\n\r\n    #drawClickline(){\r\n        // console.log(this.#clickedLines);\r\n        this.ctx.lineWidth = Math.min(this.width, this.height) * 0.008;\r\n        for(let i = 0; i < this.#clickedLines.length; i++){\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.#clickedLines[i].line.x1 * this.#xGap, this.#clickedLines[i].line.y1 * this.#yGap); \r\n            this.ctx.lineTo(this.#clickedLines[i].line.x2 * this.#xGap, this.#clickedLines[i].line.y2 * this.#yGap);\r\n            this.ctx.stroke();\r\n            this.ctx.closePath();\r\n        }\r\n    }\r\n\r\n    #drawCompleteSquareDots(){\r\n        this.#completedSquarePoints.forEach(p => {\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(p.point.x * this.#xGap, p.point.y * this.#yGap, Math.min(this.#xGap, this.#yGap) * 0.3 , 0, 2 * Math.PI);\r\n            this.ctx.fillStyle = this.playerConfig[p.player - 1].color;\r\n            this.ctx.fill();\r\n            this.ctx.closePath();\r\n        })\r\n    }\r\n\r\n    #checkValidBox(line){\r\n        // if line is horizonal\r\n        // console.log('click line', line);\r\n        // console.log('linked line ',this.#getLinkedLines(line));\r\n        const self = this;\r\n        const validSquare = [];\r\n        const goingToBeSquare = [];\r\n        if(this.#lineType(line) == Board.LineType.horizontal){\r\n            let squareLines = {\r\n                down: {\r\n                    line1: line,\r\n                    line2: {x1: line.x1, y1: line.y1, x2: line.x1, y2: line.y1 + 1},\r\n                    line3: {x1: line.x1, y1: line.y1 + 1, x2: line.x2, y2: line.y2 + 1},\r\n                    line4: {x1: line.x2, y1: line.y2, x2: line.x2, y2: line.y2 + 1}\r\n                },\r\n                up: {\r\n                    line1: line,\r\n                    line2: {x1: line.x1, y1: line.y1 - 1, x2: line.x1, y2: line.y1},\r\n                    line3: {x1: line.x2, y1: line.y2 - 1, x2: line.x2, y2: line.y2},\r\n                    line4: {x1: line.x1, y1: line.y1 - 1, x2: line.x2, y2: line.y2 - 1}\r\n                }\r\n            }\r\n\r\n            let upValid = [], downValid = [];\r\n\r\n            this.#clickedLines.forEach(l => {\r\n                if(\r\n                    this.#isEqualLine(l.line, squareLines.down.line1) ||\r\n                    this.#isEqualLine(l.line, squareLines.down.line2) ||\r\n                    this.#isEqualLine(l.line, squareLines.down.line3) ||\r\n                    this.#isEqualLine(l.line, squareLines.down.line4)\r\n                ){\r\n                    downValid.push(l);\r\n                };\r\n\r\n                if(\r\n                    this.#isEqualLine(l.line, squareLines.up.line1) ||\r\n                    this.#isEqualLine(l.line, squareLines.up.line2) ||\r\n                    this.#isEqualLine(l.line, squareLines.up.line3) ||\r\n                    this.#isEqualLine(l.line, squareLines.up.line4)\r\n                ){\r\n                    upValid.push(l);\r\n                };\r\n            });\r\n\r\n            const isValidSquare = upValid.length == 4 || downValid.length == 4;\r\n            if(upValid.length == 4) validSquare.push({side: upValid, type:'up'});\r\n            if(downValid.length == 4) validSquare.push({side: downValid, type:'down'});\r\n\r\n            if(upValid.length == 3) goingToBeSquare.push({\r\n                side: upValid, \r\n                type: 'up',\r\n                needSide: Object.values(squareLines.up).filter((l, index) => {\r\n                    for(let i = 0; i < upValid.length; i++)\r\n                        if(self.#isEqualLine(l, upValid[i].line)) return false;\r\n                    return true;\r\n                })\r\n            });\r\n            if(downValid.length == 3) goingToBeSquare.push({\r\n                side: downValid, \r\n                type: 'down',\r\n                needSide: Object.values(squareLines.down).filter((l, index) => {\r\n                    for(let i = 0; i < downValid.length; i++)\r\n                        if(self.#isEqualLine(l, downValid[i].line)) return false;\r\n                    return true;\r\n                })\r\n            });\r\n\r\n            return {\r\n                isValidSquare: isValidSquare,\r\n                validSquare: validSquare,\r\n                isGoingToValidSquare: goingToBeSquare.length > 0,\r\n                goingToBeSquare: goingToBeSquare,\r\n            };\r\n        }else{ // if line is vertical\r\n\r\n            let squareLines = {\r\n                left: {\r\n                    line1: line,\r\n                    line2: {x1: line.x1 - 1, y1: line.y1, x2: line.x1, y2: line.y1},\r\n                    line3: {x1: line.x2 - 1, y1: line.y2, x2: line.x2, y2: line.y2},\r\n                    line4: {x1: line.x1 - 1, y1: line.y1, x2: line.x2 - 1, y2: line.y2},\r\n                },\r\n                right: {\r\n                    line1: line,\r\n                    line2: {x1: line.x1, y1: line.y1, x2: line.x2 + 1, y2: line.y1},\r\n                    line3: {x1: line.x2, y1: line.y2, x2: line.x2 + 1, y2: line.y2},\r\n                    line4: {x1: line.x1 + 1, y1: line.y1, x2: line.x2 + 1, y2: line.y2},\r\n                }\r\n            }\r\n\r\n            let leftValid = [], rightValid = [];\r\n\r\n            this.#clickedLines.forEach(l => {\r\n\r\n                if(\r\n                    this.#isEqualLine(l.line, squareLines.left.line1) ||\r\n                    this.#isEqualLine(l.line, squareLines.left.line2) ||\r\n                    this.#isEqualLine(l.line, squareLines.left.line3) ||\r\n                    this.#isEqualLine(l.line, squareLines.left.line4)\r\n                ){\r\n                    leftValid.push(l);\r\n                }\r\n\r\n                if(\r\n                    this.#isEqualLine(l.line, squareLines.right.line1) ||\r\n                    this.#isEqualLine(l.line, squareLines.right.line2) ||\r\n                    this.#isEqualLine(l.line, squareLines.right.line3) ||\r\n                    this.#isEqualLine(l.line, squareLines.right.line4)\r\n                ){\r\n                    rightValid.push(l);\r\n                };\r\n            });\r\n            const isValidSquare = leftValid.length == 4 || rightValid.length == 4;\r\n            if(leftValid.length == 4) validSquare.push({side: leftValid, type: 'left'});\r\n            if(rightValid.length == 4) validSquare.push({side: rightValid, type: 'right'});\r\n            \r\n            if(leftValid.length == 3) goingToBeSquare.push({\r\n                side: leftValid, \r\n                type: 'left',\r\n                needSide: Object.values(squareLines.left).filter((l, index) => {\r\n                    for(let i = 0; i < leftValid.length; i++)\r\n                        if(self.#isEqualLine(l, leftValid[i].line)) return false;\r\n                    return true;\r\n                })\r\n            });\r\n            if(rightValid.length == 3) goingToBeSquare.push({\r\n                side: rightValid, \r\n                type: 'right',\r\n                needSide: Object.values(squareLines.right).filter((l, index) => {\r\n                    for(let i = 0; i < rightValid.length; i++)\r\n                        if(self.#isEqualLine(l, rightValid[i].line)) return false;\r\n                    return true;\r\n                })\r\n            });\r\n\r\n            return {\r\n                isValidSquare: isValidSquare,\r\n                validSquare: validSquare,\r\n                isGoingToValidSquare: goingToBeSquare.length > 0,\r\n                goingToBeSquare: goingToBeSquare\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    #lineType(line){\r\n        if(line.x1 == line.x2) return Board.LineType.vertical;\r\n        if(line.y1 == line.y2) return Board.LineType.horizontal;\r\n    }\r\n\r\n    #isEqualLine(line1, line2){\r\n        if(!(line1 || line2)) return false;\r\n        return (line1.x1 == line2.x1 && \r\n                line1.y1 == line2.y1 && \r\n                line1.x2 == line2.x2 && \r\n                line1.y2 == line2.y2) || \r\n               (line1.x1 == line2.x2 && \r\n                   line1.y1 == line2.y2 && \r\n                   line1.x2 == line2.x1 && \r\n                   line1.y2 == line2.y1);\r\n    }\r\n\r\n    #getLinkedLines(line){\r\n        let linkedLine = [];\r\n        this.#clickedLines.forEach(l => {\r\n            if((line.x1 == l.line.x1 && line.y1 == l.line.y1) || (line.x2 == l.line.x2 && line.y2 == l.line.y2) ||\r\n            (line.x1 == l.line.x2 && line.y1 == l.line.y2) || (line.x2 == l.line.x1 && line.y2 == l.line.y1)) \r\n                linkedLine.push(l);\r\n        });\r\n        return linkedLine;\r\n    }\r\n\r\n    #findCenterPointOfSquareLines(lines){\r\n        let minX, \r\n            minY, \r\n            maxX, \r\n            maxY;\r\n\r\n        for(let i = 0; i < lines.length; i++){\r\n            let xpos = [lines[i].x1, lines[i].x2].sort();\r\n            let ypos = [lines[i].y1, lines[i].y2].sort();\r\n\r\n            if(i == 0){\r\n                minX = xpos[0];\r\n                minY = ypos[0];\r\n                maxX = xpos[xpos.length - 1];\r\n                maxY = ypos[ypos.length - 1];\r\n            }else{\r\n                if(minX > xpos[0]) minX = xpos[0];\r\n                if(minY > ypos[0]) minY = ypos[0];\r\n                if(maxX < xpos[xpos.length - 1]) maxX = xpos[xpos.length - 1];\r\n                if(maxY < ypos[ypos.length - 1]) maxY = ypos[ypos.length - 1];\r\n            }\r\n        }\r\n        return {\r\n            x: minX + ((maxX - minX) / 2),\r\n            y: minY + ((maxY - minY) / 2)\r\n        }\r\n    }\r\n\r\n    #hasLine(line){\r\n        for(let i = 0; i < this.#clickedLines.length; i++ ){\r\n            if(this.#isEqualLine(this.#clickedLines[i].line, line))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    nextTurn(){\r\n        const previousPlayer = this.#turns;\r\n        const self = this;\r\n        if(this.players == this.#turns){\r\n            this.#turns = 1;\r\n        }else{\r\n            this.#turns++;\r\n        }\r\n        this.events?.onPlayerChanged && this.events?.onPlayerChanged(\r\n            {\r\n                ...this.playerConfig[previousPlayer - 1],\r\n                score: self.getPlayerScores(previousPlayer),\r\n                id: previousPlayer\r\n            },\r\n            {\r\n                ...this.playerConfig[this.#turns - 1], \r\n                score: self.getPlayerScores(this.#turns),\r\n                id: this.#turns\r\n            } \r\n        );\r\n    }\r\n\r\n    click(event){\r\n        const self = this;\r\n        const line = this.#findJointPointsFromPexelPosition(event);\r\n        if(line){\r\n            if(this.#hasLine(line)) return;\r\n            this.#clickedLines.push({\r\n                line: line,\r\n                player: this.#turns\r\n            });\r\n\r\n            const validLine = this.#checkValidBox(line);\r\n            if(validLine.isValidSquare){\r\n                validLine.validSquare.forEach(square => {\r\n                    const centerPoint = this.#findCenterPointOfSquareLines(square.side.map(s => s.line));\r\n                    self.#completedSquarePoints.push({\r\n                        point: centerPoint,\r\n                        player: this.#turns\r\n                    });\r\n                });\r\n\r\n                if(validLine.isGoingToValidSquare){\r\n                    const react = self.canvas.getBoundingClientRect();\r\n                    validLine.goingToBeSquare.forEach(square => {\r\n                        self.click({\r\n                            ...event,\r\n                            clientX: (((square.needSide[0].x1 + square.needSide[0].x2) / 2) * self.#xGap) + react.left, // 236\r\n                            clientY: (((square.needSide[0].y1 + square.needSide[0].y2) / 2) * self.#yGap) + react.top // 331\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n            this.events?.onClick && this?.events?.onClick(line);\r\n            this.nextTurn();\r\n            this.draw();\r\n            this.canvas.style.cursor = 'default';\r\n        }\r\n    }\r\n\r\n    mousemove(event){\r\n        this.draw(event);\r\n    }\r\n\r\n\r\n    setDimension(width, height){\r\n        this.width = width;\r\n        this.height = height;\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n        \r\n        this.#xGap = this.width / this.row;\r\n        this.#yGap = this.height / this.col;\r\n\r\n        this.draw();\r\n    }\r\n\r\n    setBoardSize(row, col){\r\n        this.#xGap = this.width / this.row;\r\n        this.#yGap = this.height / this.col;\r\n\r\n        this.draw();\r\n    }\r\n\r\n    getPlayerScores(playerId){\r\n        return this.#completedSquarePoints.filter(completed => {\r\n            return completed.player == playerId;\r\n        }).length;\r\n    }\r\n\r\n    get currentPlayer(){\r\n        return this.playerConfig[this.#turns - 1];\r\n    }\r\n\r\n\r\n    get clickLines(){\r\n        return this.#clickedLines;\r\n    }\r\n\r\n    get completeSquarePoints(){\r\n        return this.#completedSquarePoints;\r\n    }\r\n\r\n    \r\n    updateData(clickLines, completedDots){\r\n        this.#clickedLines = clickLines;\r\n        this.#completedSquarePoints = completedDots;\r\n        this.draw();\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack://linebox-2/./src/board.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const Board = __webpack_require__(/*! ./board */ \"./src/board.js\");\r\n\r\n\r\n\r\nconst currentPlayerView = document.querySelector('.current-player span');\r\n\r\n\r\nconst board = document.getElementById('board');\r\nconst ctx = board.getContext('2d');\r\nconst players = [\r\n    {\r\n        name: '简尚全',\r\n        color: 'red'\r\n    },\r\n    {\r\n        name: '简尚威',\r\n        color: 'green'\r\n    }\r\n];\r\nconst BoardController = new Board({\r\n    width: Math.min(window.innerWidth,window.innerHeight) * 0.75,\r\n    height: Math.min(window.innerWidth,window.innerHeight) * 0.75,\r\n    row: 10, \r\n    col: 10,\r\n    ctx: ctx,\r\n    canvas: board,\r\n    players: players,\r\n    events: {\r\n        init: function(){\r\n            currentPlayerView.textContent = players[0].name;\r\n        },\r\n        onClick: function(line){\r\n            // console.log('on clicked', line);\r\n        },\r\n        onPlayerChanged: function (previousPlayerInfo, currentPlayerInfo){\r\n            document.querySelector(`.player-info .player[data-player-id=\"${previousPlayerInfo.id}\"] .player-score`).textContent = previousPlayerInfo.score;\r\n            currentPlayerView.textContent = currentPlayerInfo.name;\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\nwindow.BoardController = BoardController;\r\n\r\n\r\nboard.addEventListener('mousemove', e => {\r\n    BoardController.mousemove(e);\r\n});\r\n\r\nboard.addEventListener('click', e => {\r\n    BoardController.click(e);\r\n});\r\n\r\n\r\n\r\n\r\n(function init(){\r\n    BoardController.draw();\r\n})();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ctx.beginPath();\r\n// ctx.arc(20,20, 10,0,2*Math.PI);\r\n// ctx.fillStyle = '#000000';\r\n// ctx.fill();\r\n\r\n// ctx.beginPath();\r\n// ctx.moveTo(10, 10);\r\n// ctx.lineTo(20, 20);\r\n// ctx.stroke();\r\n// ctx.closePath();\r\n\r\n\r\n\r\n\r\nwindow.addEventListener('resize', function(event) {\r\n    const minSize = Math.min(window.innerWidth, window.innerHeight);\r\n    BoardController.setDimension(minSize * 0.75, minSize * 0.75);\r\n}, true);\n\n//# sourceURL=webpack://linebox-2/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;